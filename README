Download and build Linux kernel source from kernel.org

-   Has 'one-touch' default behavior
-   Behavior can be customized using environment variables

DEFAULT behavior:

-   Kernel source is downloaded and built in CURRENT DIRECTORY (not
    necessarily where patch_and_build_kernel.sh is)
-   Will automatically download and build the LATEST kernel
-   Will automatically upgrade kernel config when moving to next major
    version
    -   For new config entries:
        -   Anything that can become a module will be modularized
        -   Everything else gets the DEFAULT value
-   DEBS will be built in a sub-directory named 'debs' under CURRENT
    DIRECTORY (not necessarily where patch_and_build_kernel.sh is)
-   The 'debs' directory will be deleted and re-created if it exists
-   Will use config.kernel in the directory patch_and_build_kernel.sh is
-   Defaults to using (available_cores -1) cores
-   config.prefs in directory where patch_and_build_kernel.sh is can
    contain name=value pairs that will be applied to the config while
    building

Things that can be changed using environment variables:

KERNEL_TYPE

-   Will filter available kernels
-   IGNORED if it is not a recognized type:
    latest|mainline|stable|longterm

KERNEL_VERSION

-   Will override version from config file
-   Will filter available kernels

KERNEL_CONFIG

-   FULL PATH to existing config file
-   Will override config.kernel in this directory
-   If env var is set, file MUST exist

KERNEL_BUILD_DIR

-   Overrides current_dir/debs
-   All path components except the last one MUST exist
-   If last path component does not exist, it is created
-   If last path component exists, all files/dirs under that path are
    DELETED

NUM_THREADS

-   Number of threads to use
-   Limited to (available_cores - 1) at most
-   Intended to use to limit to LESS than (available_cores - 1)

KERNEL_CONFIG_PREFS

-   FULL path to file containing name=value pairs that will be applied
    to the config while building
-   See config.prefs format below
-   If env var not set, config.prefs in the same dir as
    patch_and_build_kernel.sh is used
-   If env var is set and invalid, no config prefs are applied

KERNEL_PATCH_DIR

-   FULL Path to dir containing kernel patches
-   If env var not set, 'patches' directory in the same dir as
    patch_and_build_kernel.sh is used
-   If env var is set and invalid, no patches are applied
-   Each file in directory can contain one or more patches
-   Patches are applied in file (lexicographic order)
-   Patch files could be named starting with '001_', '002_' ... to
    visiually indicate patch order, but this is not required. Patches
    are applied by considering patch files in order as listed by 'for i
    in *'
-   Patch filenames ending in '.optional' are applied if possible.
    Failures are ignored
-   Patch filenames NOT ending in '.optional' are considered mandatory.
    Kernel build FAILS if patch does not apply.
-   Mandatory patch files can end in '.patch', although this is not
    required

config.prefs or KERNEL_CONFIG_PREFS format:

-   Lines starting with '#' are ignored
-   Blank lines are ignored
-   Valid lines should contain:
    name=value OR
    name = value
-   Regex is '^\s_(?P\S+)\s_=\s*(?P\S+)'

Packages required:

-   Run required_pkgs.sh in this directory to check and report missing
    packages
-   patch_and_build_kernel.sh automatically calls this when it runs

