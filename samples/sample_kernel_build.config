
# ------------------------------------------------------------------------
# Example config describing environment / config variables that can be set
# Note: scripts that use config file rather than environment variables
# are yet to be created
# ------------------------------------------------------------------------

# KERNEL_TYPE=latest
# -   Will filter available kernels
# -   IGNORED if it is not a recognized type:
#     latest|mainline|stable|longterm

# KERNEL_BUILD_DIR=
# -   Default: $(pwd)/debs
# -   All path components except the last one MUST exist
# -   If last path component does not exist, it is created
# -   If last path component exists, all files/dirs under that path are DELETED

# NUM_THREADS=
# -   Default: (available_cores - 1)
# -   Number of threads to use
# -   Limited to (available_cores - 1) at most
# -   Intended to use to limit to LESS than (available_cores - 1)

# KERNEL__NO_SRC_PKG=
# Default: Empty
# If set to any value other than 'no', kernel build target will be
# changed to 'bindeb-pkg' rather than 'deb-pkg. This will avoid building
# source package, but will make kernel build a bit faster

# DEBEMAIL=my.email@example.com
# Default: root@`hostname -s`
# Sets email of Maintainer field in binary deb and .dsc file

# DEBFULLNAME='My FullName'
# Default: Anonymous
# Sets full name of Maintainer field in binary deb and .dsc file

# ------------------------------------------------------------------------
# For local debian repository (local_upload.sh)
# If you do NOT have a local repository, just unset LOCAL_DEB_REPO_DIR
# LOCAL_DEB_REPO_DIR=
# REQUIRED - if unset will not upload to local repository

# LOCAL_DEB_DISTS=
# If unset will default to dist on local machine (from lsb_release -c)
# ------------------------------------------------------------------------
# For building kernel metapackages
# If you do NOT want to build metapackages, unset METAPKG_BUILD_DIR
#
# META_PKGNAME_PREFIX=
# If not set, defaults to 'cherrytux

# METAPKG_BUILD_DIR=
# REQUIRED: If not set, metapackages will not be built
# Do NOT set METAPKG_BUILD_DIR to be the same as KERNEL_BUILD_DIR
# If you do, it WILL cause problems


# ------------------------------------------------------------------------
# Specific to building source package and upload to PPA
# ------------------------------------------------------------------------
# If BOTH DEBEMAIL AND DEBFULLNAME are set, Maintainer field of source
# package is set using DEBEMAIL and DEBFULLNAME
# Source package build and PPA Upload will work even if these are not set

# GPG_KEYID=
# No default value
# Should be a gpg key fingerprint
# If not set:
#   - source package will not be signed
#   - An unsigned package will never be accepted on Launchpad.Net
#   - Because of this, patch_and_build_kernel.sh will BUILD source
#       package, but will NOT upload using dput

# GPG_DEFAULT_KEY_SET=
# Default: Empty
# Indicates default_key is set in ~/gnupg/gpg.conf
# If not empty, source package signing will be attempted even if
# GPG_KEYID is not set

# DPUT_PPA_NAME=
# No default value
# If not set, source package may be built, but will NOT be uploaded
# In addition to setting DPUT_PPA_NAME, you need to:
#   - Have SSH Keys configured on your Launchpad account FOR THE MACHINE
#       where patch_and_build_kernel.sh is running
#   - Have ~/.dput.cf setup correctly - see sample_dput.cf in the same
#       directory as patch_and_build_kernel.sh

# ------------------------------------------------------------------------
# End of specific to building source package and upload to PPA
# ------------------------------------------------------------------------

# ------------------------------------------------------------------------
# Specific to uoploading to bintray
# ------------------------------------------------------------------------

# BINTRAY_CONFIG=
# Default value: ~/.bintray.config
# Contains variables that MUST be defined to upload to bintray
# See sample_bintray.config

# ------------------------------------------------------------------------
# End of specific to uoploading to bintray
# ------------------------------------------------------------------------

# ------------------------------------------------------------------------
# Less commonly used config values
# ------------------------------------------------------------------------

# KERNEL_VERSION=
# -   No default value
# -   Will override version from config file
# -   Will filter available kernels

# KERNEL_CONFIG=
# -   Default: config.kernel in same dir as patch_and_build_kernel.sh
# -   FULL PATH to existing config file
# -   If env var is set, file MUST exist

# KERNEL_PATCH_DIR=
# -   FULL Path to dir containing kernel patches
# -   Default: 'patches' directory in the same dir as patch_and_build_kernel.sh
# -   If env var is set and invalid, no patches are applied
#
# -   Each file in directory can contain one or more patches
# -   Patches are applied in file (lexicographic order)
# -   Patch files could be named starting with '001_', '002_' ... to
#     visiually indicate patch order, but this is not required. Patches
#     are applied by considering patch files in order as listed by 'for i
#     in *'
# -   Patch filenames ending in '.optional' are applied if possible.
#     Failures are ignored
# -   Patch filenames NOT ending in '.optional' are considered mandatory.
#     Kernel build FAILS if patch does not apply.
# -   Mandatory patch files can end in '.patch', although this is not
#     required

# KERNEL_CONFIG_PREFS=
# -   FULL path to file containing name=value pairs that will be applied
#     to the config while building
# -   See config.prefs format below
# -   Default: config.prefs in the same dir as patch_and_build_kernel.sh
# -   If env var is set and invalid, no config prefs are applied

# ------------------------------------------------------------------------
# config.prefs or KERNEL_CONFIG_PREFS format:
# ------------------------------------------------------------------------
# -   Lines starting with '#' are ignored
# -   Blank lines are ignored
# -   Valid lines should contain:
#     name=value OR
#     name = value
# -   Regex is '^\s_(?P\S+)\s_=\s*(?P\S+)'
